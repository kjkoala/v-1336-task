{"version":3,"sources":["hooks/useFetchData.ts","init/types.ts","hooks/useChangePage.ts","init/actions.ts","components/Pagination.tsx","init/constants.ts","components/TableBand.tsx","hooks/useConnection.ts","hooks/useDepartment.ts","hooks/useFillData.ts","components/Select.tsx","App.tsx","reducer/tableReducer.ts","init/rootReducer.ts","init/store.ts","index.tsx"],"names":["useFetchData","useSelector","state","tableReducer","data","departments","filter_department","filter_connection","page","items","CHANGE_PAGE","FILTER_CONNECTION","FILTER_DEPARTMENT","FILL_DATA","useChangePage","dispatch","useDispatch","type","payload","changePage","Pagination","setChangePage","style","marginTop","marginBottom","pageSize","showSizeChanger","total","current","onChange","columns","title","dataIndex","key","render","text","stage","color","departament","name","position","field","cluster","well","TableBand","pagination","dataSource","useConnection","status","connection","useDepartment","department","changeDepartment","useFillData","setConnection","setDepartament","forEach","band","includes","push","row","i","length","connection_state","localStorage","setItem","toString","useEffect","getItem","parseInt","slice","Select","Option","SelectAntd","setDeparment","placeholder","value","width","marginRight","disabled","onClick","removeItem","cursor","opacity","marginLeft","map","dep","App","initialState","rootReducer","combineReducers","action","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e5ab6d3b.chunk.js","sourcesContent":["import { useSelector } from 'react-redux'\r\nimport { AppState } from '../init/rootReducer';\r\nimport { TableState } from '../init/types'\r\n\r\nexport const useFetchData = () => {\r\n  const {\r\n    data,\r\n    departments,\r\n    filter_department,\r\n    filter_connection,\r\n    page,\r\n    items\r\n  } = useSelector<AppState, TableState>(state => state.tableReducer)\r\n  return ({\r\n    data,\r\n    departments,\r\n    filter_department,\r\n    page,\r\n    filter_connection,\r\n    items\r\n  })\r\n}","// State\r\nexport type TableState = {\r\n  data: tableReducerState[];\r\n  page: number;\r\n  filter_connection: number;\r\n  filter_department: string;\r\n  departments: string[];\r\n  items: number;\r\n}\r\n\r\nexport type tableReducerState = {\r\n  id: number;\r\n  brigade_name: string;\r\n  connection_state: number;\r\n  department: Department;\r\n  position: Position;\r\n}\r\n\r\ntype Department = {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\ntype Position = {\r\n  field: string;\r\n  cluster: number;\r\n  well: number;\r\n}\r\n\r\n// Actions\r\nexport const CHANGE_PAGE = 'CHANGE_PAGE';\r\ntype TabletChangePageAction = {\r\n  type: typeof CHANGE_PAGE;\r\n  payload: {\r\n    page: number\r\n  };\r\n}\r\n\r\nexport const FILTER_CONNECTION = 'FILTER_CONNECTION';\r\ntype TabletFilterConnectionAction = {\r\n  type: typeof FILTER_CONNECTION;\r\n  payload: {\r\n    connection: number;\r\n  }\r\n}\r\n\r\nexport const FILTER_DEPARTMENT = 'FILTER_DEPARTMENT';\r\nexport type TabletFilterDepartmentAction = {\r\n  type: typeof FILTER_DEPARTMENT;\r\n  payload: {\r\n    department: string;\r\n  }\r\n}\r\n\r\nexport const FILL_DATA = 'FILL_DATA';\r\nexport type TabletFillData = {\r\n  type: typeof FILL_DATA;\r\n  payload: {\r\n    data: tableReducerState[];\r\n    departments: string[];\r\n    items: number;\r\n  }\r\n}\r\n\r\nexport const FETCH_DATA = 'FETCH_DATA'\r\ntype TableFetchData = {\r\n  type: typeof FETCH_DATA;\r\n}\r\n\r\nexport type tableFetchDataAction = {\r\n  items: number;\r\n  data: tableReducerState[];\r\n  departments: string[];\r\n}\r\n\r\nexport type TableActionTypes =\r\n  | TabletChangePageAction\r\n  | TabletFilterConnectionAction\r\n  | TabletFilterDepartmentAction\r\n  | TabletFillData\r\n  | TableFetchData;\r\n","import { useDispatch } from 'react-redux'\r\nimport { changePage } from '../init/actions'\r\n\r\nexport const useChangePage = () => {\r\n  const dispatch = useDispatch()\r\n  return (page: number) => {\r\n    dispatch(changePage(page))\r\n  }\r\n}","import { CHANGE_PAGE, FETCH_DATA, FILL_DATA, FILTER_CONNECTION, FILTER_DEPARTMENT, tableFetchDataAction } from './types';\r\n\r\nexport function changePage(page: number) {\r\n  return {\r\n    type: CHANGE_PAGE,\r\n    payload: {\r\n      page\r\n    }\r\n  }\r\n}\r\n\r\nexport function changeConnection(connection: number) {\r\n  return {\r\n    type: FILTER_CONNECTION,\r\n    payload: {\r\n      connection\r\n    }\r\n  }\r\n}\r\n\r\nexport function changeDepartment(department: string) {\r\n  return {\r\n    type: FILTER_DEPARTMENT,\r\n    payload: {\r\n      department\r\n    }\r\n  }\r\n}\r\n\r\nexport function fillData(payload: tableFetchDataAction) {\r\n  return {\r\n    type: FILL_DATA,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function fetchData() {\r\n  return {\r\n    type: FETCH_DATA\r\n  }\r\n}","import React from 'react'\r\nimport { Pagination as PaginationAntd } from 'antd';\r\nimport { ITEMS_ON_PAGE } from '../init/constants';\r\nimport { useFetchData } from '../hooks/useFetchData';\r\nimport { useChangePage } from '../hooks/useChangePage';\r\n\r\nexport const Pagination = () => {\r\n\r\n\r\n  const { items, page } = useFetchData()\r\n  const setChangePage = useChangePage()\r\n\r\n  return (<PaginationAntd\r\n    style={{ marginTop: 30, marginBottom: 30 }}\r\n    pageSize={ITEMS_ON_PAGE}\r\n    showSizeChanger={false}\r\n    total={items}\r\n    current={page}\r\n    onChange={setChangePage}\r\n  />)\r\n}","export const ITEMS_ON_PAGE = 20","import React from 'react'\r\nimport { Table, Tag } from 'antd';\r\nimport { useFetchData } from '../hooks/useFetchData';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Бригада',\r\n    dataIndex: 'brigade_name',\r\n    key: 'brigade_name',\r\n    render: (text: string) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: 'Этап подключения',\r\n    dataIndex: 'connection_state',\r\n    key: 'connection_state',\r\n    render: (stage: number) => (\r\n      <>\r\n        {stage ?\r\n          <Tag color=\"green\">\r\n            ПОДКЛЮЧЕНО\r\n          </Tag>\r\n          :\r\n          <Tag color=\"volcano\">\r\n            ОТКЛЮЧЕНО\r\n          </Tag>}\r\n      </>\r\n    ),\r\n  },\r\n  {\r\n    title: 'Отделение',\r\n    dataIndex: 'department',\r\n    key: 'department',\r\n    render: (departament: any) => {\r\n      return departament.name\r\n    }\r\n  },\r\n  {\r\n    title: 'Местоположение',\r\n    key: 'position',\r\n    dataIndex: 'position',\r\n    render: (position: any) => (<>\r\n      {position.field}{' '}\r\n      {position.cluster}{' '}\r\n      {position.well}\r\n    </>)\r\n  }\r\n];\r\n\r\n\r\nexport const TableBand = () => {\r\n  const { data } = useFetchData()\r\n  return (\r\n    <Table pagination={false} columns={columns} dataSource={data} />\r\n  )\r\n}","import { useDispatch } from 'react-redux'\r\nimport { changeConnection } from '../init/actions'\r\n\r\nexport const useConnection = () => {\r\n  const dispatch = useDispatch()\r\n  return (status: number) => {\r\n    dispatch(changeConnection(status))\r\n  }\r\n}","import { useDispatch } from 'react-redux'\r\nimport { changeDepartment } from '../init/actions'\r\n\r\nexport const useDepartment = () => {\r\n  const dispatch = useDispatch()\r\n  return (department: string) => {\r\n    dispatch(changeDepartment(department))\r\n  }\r\n}","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fillData } from '../init/actions';\r\nimport { ITEMS_ON_PAGE } from '../init/constants';\r\nimport { tableReducerState } from '../init/types'\r\nimport { useConnection } from './useConnection';\r\nimport { useDepartment } from './useDepartment';\r\nimport { useFetchData } from './useFetchData'\r\n\r\n\r\nexport const useFillData = (data: tableReducerState[]) => {\r\n  const setConnection = useConnection()\r\n  const setDepartament = useDepartment()\r\n  const dispatch = useDispatch()\r\n  const { page, filter_connection, filter_department } = useFetchData()\r\n  let departments: string[] = []\r\n  data.forEach(band => {\r\n    if (!departments.includes(band.department.name)) {\r\n      departments.push(band.department.name)\r\n    }\r\n  })\r\n\r\n  const row: tableReducerState[] = []\r\n  for (let i = 0; i < data.length; i++) {\r\n    if (filter_department && filter_connection > -1) {\r\n      if (data[i].department.name === filter_department && data[i].connection_state === filter_connection) row.push(data[i])\r\n    } else if (filter_department) {\r\n      if (data[i].department.name === filter_department) row.push(data[i])\r\n    } else if (filter_connection > -1) {\r\n      if (data[i].connection_state === filter_connection) row.push(data[i])\r\n    } else {\r\n      row.push(data[i])\r\n    }\r\n  }\r\n  if (filter_department !== '') {\r\n    localStorage.setItem('department', filter_department)\r\n  }\r\n\r\n  if (filter_connection > -1) {\r\n    localStorage.setItem('connection', filter_connection.toString())\r\n  }\r\n\r\n  useEffect(() => {\r\n    const departament = localStorage.getItem('department')\r\n    const connection = localStorage.getItem('connection')\r\n    if (departament) {\r\n      setDepartament(departament)\r\n    }\r\n    if (connection) {\r\n      setConnection(parseInt(connection))\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    dispatch(fillData({ data: row.slice((page - 1) * ITEMS_ON_PAGE, page * ITEMS_ON_PAGE), departments, items: row.length }))\r\n  }, [dispatch, filter_department, filter_connection, page])\r\n}","import React from 'react'\r\nimport { Select as SelectAntd } from 'antd'\r\nimport DeleteOutlined from '@ant-design/icons/DeleteOutlined'\r\n\r\n\r\nimport { useFetchData } from '../hooks/useFetchData'\r\nimport { useDepartment } from '../hooks/useDepartment'\r\nimport { useConnection } from '../hooks/useConnection'\r\n\r\nexport const Select = () => {\r\n  const { Option } = SelectAntd;\r\n  const { departments, filter_connection, filter_department } = useFetchData()\r\n  const setDeparment = useDepartment()\r\n  const setConnection = useConnection()\r\n\r\n  return (<div style={{marginTop: 30, marginBottom: 15}}>\r\n    <SelectAntd\r\n      placeholder=\"Этап подключения\"\r\n      value={filter_connection}\r\n      onChange={setConnection}\r\n      style={{ width: 240, marginRight: 15 }}\r\n    >\r\n      <Option disabled value={-1}>Этап подключения</Option>\r\n      <Option value={1}>Подключено</Option>\r\n      <Option value={0}>Отключено</Option>\r\n    </SelectAntd>\r\n    <DeleteOutlined\r\n      onClick={() => {\r\n        setConnection(-1)\r\n        localStorage.removeItem('connection')\r\n      }}\r\n      title=\"Удалить этап подключения\"\r\n      style={{\r\n        cursor: filter_connection === -1 ? 'default' : 'pointer',\r\n        opacity: filter_connection === -1 ? 0.2 : 1\r\n      }}\r\n    />\r\n    <SelectAntd\r\n      style={{ width: 240, marginLeft: 35, marginRight: 15 }}\r\n      onChange={setDeparment}\r\n      value={filter_department}\r\n    >\r\n      <Option disabled value=\"\">Выберите подразделение</Option>\r\n      {departments.map((dep) => (<Option key={dep} value={dep}>{dep}</Option>))}\r\n    </SelectAntd>\r\n    <DeleteOutlined\r\n      onClick={() => {\r\n        setDeparment('')\r\n        localStorage.removeItem('department')\r\n      }}\r\n      title=\"Удалить выбранное подазделение\"\r\n      style={{\r\n        cursor: filter_department === '' ? 'default' : 'pointer',\r\n        opacity: filter_department === '' ? 0.2 : 1\r\n      }}\r\n    />\r\n  </div>)\r\n}","import React from 'react';\nimport data from './json/data.json'\n\nimport { Pagination } from './components/Pagination';\nimport { TableBand } from './components/TableBand';\nimport { useFillData } from './hooks/useFillData';\nimport { Select } from './components/Select';\n\nconst App = () => {\n  useFillData(data) // загрузка бригад в redux\n  return (\n    <>\n      <Select />\n      <TableBand />\n      <Pagination />\n    </>\n  );\n}\n\nexport default App;\n","import {\r\n  TableState,\r\n  TableActionTypes,\r\n  CHANGE_PAGE,\r\n  FILTER_CONNECTION,\r\n  FILTER_DEPARTMENT,\r\n  FILL_DATA\r\n} from '../init/types'\r\n\r\nconst initialState: TableState = {\r\n  data: [],\r\n  page: 1,\r\n  filter_connection: -1,\r\n  filter_department: '',\r\n  departments: [],\r\n  items: 0\r\n}\r\n\r\nexport const tableReducer = (state = initialState, action: TableActionTypes): TableState => {\r\n  switch (action.type) {\r\n    case FILL_DATA:\r\n      return { ...state, data: action.payload.data, departments: action.payload.departments, items: action.payload.items }\r\n    case CHANGE_PAGE:\r\n      return { ...state, page: action.payload.page }\r\n    case FILTER_CONNECTION:\r\n      return { ...state, filter_connection: action.payload.connection, page: 1 }\r\n    case FILTER_DEPARTMENT:\r\n      return { ...state, filter_department: action.payload.department, page: 1 }\r\n  }\r\n\r\n  return state;\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport { tableReducer } from '../reducer/tableReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  tableReducer\r\n})\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>","import { createStore } from 'redux'\r\n\r\nimport { rootReducer } from './rootReducer'\r\n\r\nexport const store = createStore(rootReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport { store } from './init/store';\n\nimport 'antd/dist/antd.css';\nimport './index.css';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}